# -*- coding: utf-8 -*-
"""Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17dK0-Xr-X2wODMSrfw0tjPrzlZTMofpz
"""

# importing important libariries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# setting the default visual library for EDA
sns.set_style('darkgrid')

"""# **EDA**"""

df = pd.read_csv("electricity_cost_dataset.csv")
# displaying the first 5 rows
# for reference
df.head()

"""**Extracting the basic information about the dataset**"""

df.shape     #how many rows and columns

df.columns   #names of the column

df.dtypes    #dtype of each column

df.info()      #for analysing missing values in data

#using (.info) we came to know that there is no missing values in our data
#double checking missing values across each column (the output should come zero for each column)
df.isnull().sum()

df.describe()    #gives statistical summary of the data (like mean, devaiation and all)

"""# DataSet Summary
**Total Rows:** 10000

**Target Variable:** electricity cost

**Categorical Features**: Structure Type

**Numerical Features**: Site Area, Water Consumption, AQI, etc.

**Missing Values**: None

**Analysing The Target Variable**
"""

#under this we will analyse any skewness or outliners (if present)
  #skew detection (mathematically)
skew = df['electricity cost'].skew()
print("Skewness:", skew)

  #for skew detection
sns.histplot(df['electricity cost'], kde=True, bins=30, color='teal')
plt.title('Distribution of Electricity Cost')
plt.xlabel('Electricity Cost')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

# we can see that the skewness is a little towards the right
# but when we calculated it mathematically then there it is
# in between the safe range (0.5 < skew < 0.5) and hence not a big problem

#for outliners detection
sns.boxplot(x=df['electricity cost'], color='teal')
plt.title('Boxplot of Electricity Cost')
plt.xlabel('Electricity Cost')
plt.grid(True)
plt.show()

# from this it is clear that there are some outliners
# but these outliners not being large in number can be considered moderate
# hence we can avoid them for now
# but if they caused problem in our model training then we can practice either scaling or clipping

"""**Analysing other numerical features**"""

# seprating the target variable and features without numerical values
target = 'electricity cost'
# extracting only the numerical features then
# extracting the name of column and addind them in the list
# we are converting in list so that we can loop through each column easily
numerical_features = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

# removing the target variable column
if target in numerical_features:
  numerical_features.remove(target)

# calculating skewness
for feature in numerical_features:
  skew = df[feature].skew()
  if skew > 0.5:
    print(f"Skewed Right: {feature} = {skew}")
  elif skew < -0.5:
    print(f"Skewed Left: {feature} = {skew}")
  else:
    print(f"Skewed Correctly: {feature} = {skew}")
  sns.histplot(df[feature], color='skyblue', kde=True, bins=30)
  plt.title(f'Distribution of {feature}')
  plt.xlabel(f'{feature}')
  plt.ylabel('Frequency')
  plt.grid(True)
  plt.show()

# from the above analysis we see significant positive skewness in 2 coulmns
# 1. Disturbution of Water Consumption
# 2. Disturbution of resident count
# applying log transformation
#this method is used only for positive skewing since the log can take only poistive values
#not appilicable for negitive values
df['water consumption'] = np.log1p(df['water consumption'])
df['resident count'] = np.log1p(df['resident count'])

# checking on the updates
transformed_skew = df[['water consumption', 'resident count']].skew()
print(f'Skewness after transformation \n{transformed_skew}\n')

#glimpse of the updated DataSet
df.head()
#this clearly represents the variation in two features
# 1. water consumption
# 2. resident count

#updating the numerical features list
numerical_features = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
numerical_features.remove('electricity cost')

#checking for outliners
for feature in numerical_features:
  sns.boxplot(x=df[feature], color='skyblue')
  plt.title(f'Boxplot of {feature}')
  plt.xlabel(f'{feature}')
  plt.grid(True)
  plt.show()

# from the above plots we can see that the outliners exist in two features but
# they range form mild to a little high so at this particular stage we can avoid them and move on

"""**Analysing the categorical dataset now**"""

# anaylsising the TEXT data to see if thier dominance of a particular or not
sns.countplot(data=df, x='structure type', color='skyblue')
plt.title('Distribution of Structure Type')
plt.xlabel('Structure Type')
plt.ylabel('Count')
plt.show()

# we can see from the above plots that there Residential structer type is the most dominat feature of all
# hence the categorical data is imbalanced though
# this issue can be solved later before training using 'One-Hot-Encoding'

sns.boxplot(x='structure type', y='electricity cost', data=df)
plt.title('Electricity Cost by Structure Type')

"""**Making a correlation heatmap**"""

# in here we will be calculating correlation between each feature
# this is to see which feature has more dominance over the target variable

# selecting only the numerical columns, including the target variable
numerical_df = df.select_dtypes(include=['int64', 'float64'])

# finding correlation between each numerical columnn
corr_matrix = numerical_df.corr()
print(corr_matrix['electricity cost'].sort_values(ascending=False))

sns.heatmap(corr_matrix, annot=True, cmap='RdPu', fmt=".2f", linewidths=0.5)
plt.title("Correlation Heatmap of Numerical Features")
plt.show()

# from this plot we can make it clear that "site area" is the feature which affects the electricity cost the most
# followed by water consumption and utilization rate
# so if significant accuracy in not found in the model then we will aplly PCA
# for handling multicollinear features

#a pair plot of top 3 features with the target variable
#this is for a better understanding of the dataset
features_ = ['electricity cost', 'site area', 'water consumption', 'utilisation rate']
sns.pairplot(df[features_])
plt.show()

"""#Key Findings from EDA:

- **Electricity Cost** is moderately skewed but manageable.
- **Site Area**, **Water Consumption**, and **Utilisation Rate** are the top correlated features with the target variable.
- **Water Consumption** and **Resident Count** are skewed though they have been fixed using log transform.
- **Structure Type** is imbalanced which can be later fixed using one-hot encoding in in preprocessing.
- **Outliers** are mild â†’ no need for removal yet.

"""